services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181  # Порт, по которому будет доступен Zookeeper
    ports:
      - "2181:2181"  # Прокси порт Zookeeper
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0  # Используемый Docker-образ Kafka (на базе Scala 2.13 и Kafka 2.8.0)
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Адрес ZooKeeper, к которому Kafka подключается (имя сервиса:порт)

      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9094
      # Этот адрес Kafka будет "рекламировать" клиентам для подключения извне

      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9094
      # На каком интерфейсе и порту Kafka слушает входящие подключения (внутри контейнера)

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # Указываем, что слушатель PLAINTEXT использует протокол PLAINTEXT (т.е. без шифрования)

      KAFKA_BROKER_ID: 1
      # Уникальный ID брокера Kafka в пределах кластера (если будет несколько брокеров, у всех должны быть разные ID)

    ports:
      - "9092:9092"
      - "9093:9093"
#      - "9094:9094"  # Пробрасываем порт
    depends_on:
      - zookeeper  # Kafka будет запускаться только после Zookeeper
    networks:
      - app_network


  consumer:
    build:
      context: ..
      dockerfile: kafka/consumers/Dockerfile.consumer
    depends_on:
      - kafka
    networks:
      - app_network


networks:
  app_network:
    driver: bridge
    external: true  # подключаем к общей сети